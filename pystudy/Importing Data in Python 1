-----------------------------------------------------------
Importing Data in Python 1
-----------------------------------------------------------
1. Introduction and flat files
-----------------------------------------------------------
Importing text file


file = open('moby_dick.txt', mode='r')

print(file.read())

file.close()

-----------------------------------------------------------
Importing text files line by line


with open('moby_dick.txt') as file:
    print(file.readline())
    print(file.readline())
    print(file.readline())

-----------------------------------------------------------
Import flat files as Numpy array


# MNIST digit recognition dataset

import numpy as np

file = 'digits.csv'

digits = np.loadtxt(file, delimiter=',')   # Load file as array
digits

# data = np.loadtxt(file, delimiter='\t', dtype=str)   # 탭 구분, 문자열

# data_float = np.loadtxt(file, delimiter='\t', dtype='float', skiprows=1)   # 데이터 타입 지정, 1번째 줄 제외

# data = pd.read_csv(file, header=None, nrows=5)   # using pandas

digits.shape

print(type(digits))

# reshape a row
im = digits[21, 1:]
im_sq = np.reshape(im, (28, 28))   # 28 * 28 format

# Plot reshaped data
plt.imshow(im_sq, cmap='Greys', interpolation='nearest')
plt.show()

-----------------------------------------------------------
pandas 를 이용해 txt 파일 읽는 경우


* 탭 구분, '#'으로 표시된 주석 포함한 문서

file = 'titanic_corrupt.txt'
data = pd.read_csv(file, sep='\t', comment='#', na_values=['Nothing'])



-----------------------------------------------------------
2. Importing data from other file types
-----------------------------------------------------------
Listing sheets of Excel spreadsheets


# Import pandas
import pandas as pd

# Assign spreadsheet filename: file
file = 'battledeath.xlsx'

# Load spreadsheet: xl
xl = pd.ExcelFile(file)

# Print sheet names
print(xl.sheet_names)

-----------------------------------------------------------
Importing sheets of Excel spreadsheets


# Load a sheet into a DataFrame by name: df1
df1 = xl.parse('2004')

# Print the head of the DataFrame df1
print(df1.head())

# Load a sheet into a DataFrame by index: df2
df2 = xl.parse(0)

# Print the head of the DataFrame df2
print(df2.head())

-----------------------------------------------------------
Customizing your spreadsheet import


# Parse the first sheet and rename the columns: df1
df1 = xl.parse(0, skiprows=1, names=['Country','AAM due to War (2002)'])

print(df1.head())

# Parse the first column of the second sheet and rename the column: df2
df2 = xl.parse(1, parse_cols=0, skiprows=1, names=['Country'])

print(df2.head())

-----------------------------------------------------------
Importing SAS files using pandas


# Import sas7bdat package
from sas7bdat import SAS7BDAT

# Save file to a DataFrame: df_sas
with SAS7BDAT('sales.sas7bdat') as file:
    df_sas = file.to_data_frame()

# Print head of DataFrame
print(df_sas.head())

# Plot histograms of a DataFrame feature (pandas and pyplot already imported)
pd.DataFrame.hist(df_sas[['P']])
plt.ylabel('count')
plt.show()


-----------------------------------------------------------
Using h5py to import HDF5 files

* hdf5(Hierarchical Data Format v. 5)는 대용량 데이터를 저장하기 위한 파일 포맷.

import numpy as np
import h5py

# Assign filename: file
file = 'LIGO_data.hdf5'

# Load file: data
data = h5py.File(file, 'r')

print(type(data))

# Print the keys of the file
for key in data.keys():
    print(key)

-----------------------------------------------------------
Extracting data from your HDF5 file


# Get the HDF5 group: group
group = data['strain']

# Check out keys of group
for key in group.keys():
    print(key)

# Set variable equal to time series data: strain
strain = data['strain']['Strain'].value

# Set number of time points to sample: num_Samples
num_samples = 10000

# Set time vector
time = np.arange(0, 1, 1/num_samples)

# Plot data
plt.plot(time, strain[:num_samples])
plt.xlabel('GPS Time (s)')
plt.ylabel('strain')
plt.show()

-----------------------------------------------------------
Importing MATLAB files


# Import package
import scipy.io

# Load MATLAB file: mat
mat = scipy.io.loadmat('albeck_gene_expression.mat')

print(type(mat))

-----------------------------------------------------------
The structure of .mat in Python


# Print the keys of the MATLAB dictionary
print(mat.keys())

# Print the type of the value corresponding to the key 'CYratioCyt'
print(type(mat['CYratioCyt']))

# Print the shape of the value corresponding to the key 'CYratioCyt'
print(np.shape(mat['CYratioCyt']))

# Subset the array and plot it
data = mat['CYratioCyt'][25, 5:]
fig = plt.figure()
plt.plot(data)
plt.xlabel('time (min.)')
plt.ylabel('normalized fluorescence (measure of expression)')
plt.show()



-----------------------------------------------------------
3. Working with relational databases in Python
-----------------------------------------------------------
Creating a database engine


# Import necessary module
from sqlalchemy import create_engine

# Create engine: engine
engine = create_engine('sqlite:///Chinook.sqlite')

-----------------------------------------------------------
What are the tables in the database?


# Import necessary module
from sqlalchemy import create_engine

# Create engine: engine
engine = create_engine('sqlite:///Chinook.sqlite')

# Save the table names to a list: table_names
table_names = engine.table_names()
print(table_names)

-----------------------------------------------------------
SQL Queries


# Import packages
from sqlalchemy import create_engine
import pandas as pd

# Create engine: engine
engine = create_engine('sqlite:///Chinook.sqlite')

# Open engine connection
con = engine.connect()

# Perform query
rs = con.execute("SELECT * FROM Album")

# Save results of the query to DataFrame: df
df = pd.DataFrame(rs.fetchall())
print(df.head())

con.close()

-----------------------------------------------------------
Customizing the SQL Queries


# Open engine in context manager
# Perform query and save results to DataFrame: df
with engine.connect() as con:
    rs = con.execute("SELECT LastName, Title FROM Employee")
    df = pd.DataFrame(rs.fetchmany(size=3))
    df.columns = rs.keys()

print(len(df))
print(df.head())

-----------------------------------------------------------
Filtering


# Create engine: engine
engine = create_engine('sqlite:///Chinook.sqlite')

# Open engine in context manager
# Perform query and save results to DataFrame: df
with engine.connect() as con:
    rs = con.execute("SELECT * FROM Employee WHERE EmployeeId >= 6")
    df = pd.DataFrame(rs.fetchall())
    df.columns = rs.keys()

print(df.head())

-----------------------------------------------------------
Ordering


# Create engine: engine
engine = create_engine('sqlite:///Chinook.sqlite')

# Open engine in context manager
with engine.connect() as con:
    rs = con.execute("SELECT * FROM Employee ORDER BY BirthDate")
    df = pd.DataFrame(rs.fetchall())
    # Set the DataFrame's column names
    df.columns = rs.keys()

print(df.head())

-----------------------------------------------------------
Pandas and SQL Queries


# Import packages
from sqlalchemy import create_engine
import pandas as pd

# Create engine: engine
engine = create_engine('sqlite:///Chinook.sqlite')

# Execute query and store records in DataFrame: df
df = pd.read_sql_query("SELECT * FROM Album", engine)

print(df.head())

# Open engine in context manager
# Perform query and save results to DataFrame: df1
with engine.connect() as con:
    rs = con.execute("SELECT * FROM Album")
    df1 = pd.DataFrame(rs.fetchall())
    df1.columns = rs.keys()

# Confirm that both methods yield the same result: does df = df1 ?
print(df.equals(df1))

-----------------------------------------------------------
Pandas for more complex querying


# Import packages
from sqlalchemy import create_engine
import pandas as pd

# Create engine: engine
engine = create_engine('sqlite:///Chinook.sqlite')

# Execute query and store records in DataFrame: df
df = pd.read_sql_query(
    "SELECT * FROM Employee WHERE EmployeeId >= 6 ORDER BY BirthDate",
    engine
)

print(df.head())

-----------------------------------------------------------
INNER JOIN


# Open engine in context manager
# Perform query and save results to DataFrame: df
with engine.connect() as con:
    rs = con.execute("SELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID")
    df = pd.DataFrame(rs.fetchall())
    df.columns = rs.keys()

# Print head of DataFrame df
print(df.head())

-----------------------------------------------------------
Filtering your INNER JOIN


# Execute query and store records in DataFrame: df
df = pd.read_sql_query("SELECT * FROM PlaylistTrack INNER JOIN Track on PlaylistTrack.TrackId = Track.TrackId WHERE Milliseconds < 250000",
    engine
)

print(df.head())



-----------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------


-----------------------------------------------------------


-----------------------------------------------------------


-----------------------------------------------------------


-----------------------------------------------------------


-----------------------------------------------------------


-----------------------------------------------------------


-----------------------------------------------------------


-----------------------------------------------------------


-----------------------------------------------------------


-----------------------------------------------------------


